/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package jclients;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.DefaultListModel;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

import Model.Order;
import Model.OrderStatus;
import java.util.ArrayList;
import javax.swing.JOptionPane;

/**
 *
 * @author shreejal
 */
public class ClientFrame extends javax.swing.JFrame {

    /**
     * Creates new form ClientFrame
     */
    public ObjectInputStream ois = null;
    public ObjectOutputStream oos = null;
    static ServerSocket serverr;
    public SocketClient client;
    public int port;
    public String serverAddr;
    public Thread clientThread;
    public DefaultListModel model;
    
    public ClientFrame() {
        initComponents();
        ta_client.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        b_connect = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        tf_address = new javax.swing.JTextField();
        tf_port = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        ta_client = new javax.swing.JTextArea();
        jScrollPane2 = new javax.swing.JScrollPane();
        DeliverTable = new javax.swing.JTable();
        tf_server = new javax.swing.JTextField();
        b_send = new javax.swing.JButton();
        b_sendRow = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        jScrollPane3 = new javax.swing.JScrollPane();
        OrderInTable = new javax.swing.JTable();
        jLabel4 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        b_cooked = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        b_connect.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        b_connect.setText("connect");
        b_connect.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_connectActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel1.setText("Address :");

        tf_address.setText("localhost");
        tf_address.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                tf_addressActionPerformed(evt);
            }
        });

        tf_port.setText("13000");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("port :");

        ta_client.setColumns(20);
        ta_client.setRows(5);
        jScrollPane1.setViewportView(ta_client);

        DeliverTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "TableNo", "DishName", "Quantity", "OrderStatus", "Unit Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane2.setViewportView(DeliverTable);

        b_send.setText("send");

        b_sendRow.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        b_sendRow.setText("DELIVERIES");
        b_sendRow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_sendRowActionPerformed(evt);
            }
        });

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel3.setText("DELIVERIES :::");

        OrderInTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                { new Integer(1), "momo",  new Integer(3), "ORDER_IN",  new Integer(230)},
                { new Integer(3), "choemein",  new Integer(5), "ORDER_IN",  new Integer(140)},
                { new Integer(2), "samosa",  new Integer(10), "ORDER_IN",  new Integer(15)},
                { new Integer(2), "Panipuri",  new Integer(2), "ORDER_IN",  new Integer(80)},
                { new Integer(1), "veg",  new Integer(2), "ORDER_IN",  new Integer(120)}
            },
            new String [] {
                "TableNo", "DishName", "Quantity", "OrderStatus", "Unit Price"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class, java.lang.String.class, java.lang.Integer.class
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }
        });
        jScrollPane3.setViewportView(OrderInTable);

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel4.setText("ORDER IN TABLE: :");

        jButton1.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jButton1.setText("COOKING");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        b_cooked.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        b_cooked.setText("COOKED");
        b_cooked.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                b_cookedActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 786, Short.MAX_VALUE)
                            .addComponent(jScrollPane1)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 786, Short.MAX_VALUE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(tf_server)
                                .addGap(10, 10, 10)
                                .addComponent(b_send)
                                .addGap(8, 8, 8))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 62, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addComponent(tf_address, javax.swing.GroupLayout.PREFERRED_SIZE, 141, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(46, 46, 46)
                                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                        .addComponent(tf_port, javax.swing.GroupLayout.PREFERRED_SIZE, 78, javax.swing.GroupLayout.PREFERRED_SIZE))
                                    .addComponent(jLabel3)
                                    .addComponent(jLabel4))
                                .addGap(0, 0, Short.MAX_VALUE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                        .addComponent(b_sendRow)
                                        .addGap(348, 348, 348))
                                    .addComponent(b_connect, javax.swing.GroupLayout.Alignment.TRAILING))))
                        .addContainerGap())
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(b_cooked, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(41, 41, 41))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(tf_port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(tf_address))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(b_connect, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(b_send)
                    .addComponent(tf_server, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(jLabel4)
                .addGap(13, 13, 13)
                .addComponent(jScrollPane3, javax.swing.GroupLayout.PREFERRED_SIZE, 126, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(b_cooked, javax.swing.GroupLayout.DEFAULT_SIZE, 25, Short.MAX_VALUE)
                    .addComponent(jButton1))
                .addGap(18, 18, 18)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 140, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(b_sendRow))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void b_connectActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_connectActionPerformed
        // TODO add your handling code here:
        
        serverAddr = tf_address.getText(); 
        port = Integer.parseInt(tf_port.getText());
        
        if(!serverAddr.isEmpty() && !tf_port.getText().isEmpty()){
            try{
                client = new SocketClient(this);
                clientThread = new Thread(client);
                clientThread.start();
                ta_client.append("Server accepted request");
                //client.send(new Order(3, "Username", 3, OrderStatus.COOKED,778));
               b_connect.setEnabled(false);
               tf_address.setEditable(false);
               tf_port.setEditable(false);
               
            }
            catch(Exception ex){
                ta_client.append("[Application > Me] : Server not found\n");
            }
        }
    }//GEN-LAST:event_b_connectActionPerformed

    private void b_sendRowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_sendRowActionPerformed
        // TODO add your handling code here:
        
         try {
        TableModel model = DeliverTable.getModel();
        DefaultTableModel dtm = (DefaultTableModel)DeliverTable.getModel();
        int[] index = DeliverTable.getSelectedRows();
        //ArrayList<User> list = ListUser();
       ObjectOutputStream oos = (new ObjectOutputStream(client.socket.getOutputStream()));
        Object rowData[] = new Object[5];
        //DefaultTableModel model2 = (DefaultTableModel) jTable2.getModel();
                
        
        for(int i=0;i<index.length;i++)
        {
            rowData[0] = model.getValueAt(index[i],0);
            rowData[1] = model.getValueAt(index[i],1);
            rowData[2] = model.getValueAt(index[i],2);
//            rowData[3] = model.getValueAt(index[i],3);
//             if(!rowData[3].equals("COOKED")){
//                JOptionPane.showMessageDialog(null, "Only select COOKED row");
//                break;
//                }
            rowData[3] = OrderStatus.DELIVERED.toString();
            
            rowData[4] = model.getValueAt(index[i],4);          
           
                //model2.addRow(rowData);
                dtm.removeRow(index[i]);
            	Order order = new Order((int)rowData[0],(String)rowData[1], (int)rowData[2], (String)rowData[3], (int)rowData[4]);
            	//dtm.addRow(new Object[]{order.getTableNo(),order.getDishName(),order.getQuantity(),order.getStatusString(),order.getUnitPrice()});
            	
                oos.writeObject(order);
               //client.send(new Order(3, "Username", 3, OrderStatus.COOKED,778));
        }
            } catch (IOException ex) {
                Logger.getLogger(ClientFrame.class.getName()).log(Level.SEVERE, null, ex);
            }
        
        
     //   oos = writeObject(msssg);
        
    }//GEN-LAST:event_b_sendRowActionPerformed

    private void tf_addressActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_tf_addressActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_tf_addressActionPerformed

    private void b_cookedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_b_cookedActionPerformed
        // TODO add your handling code here:
        DefaultTableModel model = (DefaultTableModel) OrderInTable.getModel();
        int[] index = OrderInTable.getSelectedRows();
        Object rowData[] = new Object[5];
       
        
        for(int i=0;i<index.length;i++)
        {
            rowData[0] = model.getValueAt(index[i],0);
            rowData[1] = model.getValueAt(index[i],1);
            rowData[2] = model.getValueAt(index[i],2);
            rowData[3] = model.getValueAt(index[i],3);
             if(!rowData[3].equals("COOKING")){
                JOptionPane.showMessageDialog(null, "Only select COOKING row");
                break;
                }
            rowData[3] = OrderStatus.COOKED.toString();
            rowData[4] = model.getValueAt(index[i],4);
            
            model.removeRow(index[i]);
            DefaultTableModel model2 = (DefaultTableModel) DeliverTable.getModel();
            model2.addRow(rowData);
        }
    }//GEN-LAST:event_b_cookedActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        
        TableModel model = OrderInTable.getModel();
        int[] index = OrderInTable.getSelectedRows();
        Object rowData[] = new Object[5];
        DefaultTableModel model2 = (DefaultTableModel) OrderInTable.getModel();
        
        
         for(int i=0;i<index.length;i++)
        {
            rowData[0] = model.getValueAt(index[i],0);
            rowData[1] = model.getValueAt(index[i],1);
            rowData[2] = model.getValueAt(index[i],2);
            rowData[3] = model.getValueAt(index[i],3);
            if(!rowData[3].equals("ORDER_IN")){
                JOptionPane.showMessageDialog(null, "Only select ORDER_IN row");
                break;
                }
            rowData[3] = OrderStatus.COOKING.toString();
            rowData[4] = model.getValueAt(index[i],4);
            model2.removeRow(index[i]);
            model2.addRow(rowData);
        }
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ClientFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ClientFrame().setVisible(true);
            }
        });
        
       // DataInputStream dis = new DataInputStream(serverr.getInputStream());
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    public javax.swing.JTable DeliverTable;
    public javax.swing.JTable OrderInTable;
    private javax.swing.JButton b_connect;
    private javax.swing.JButton b_cooked;
    private javax.swing.JButton b_send;
    private javax.swing.JButton b_sendRow;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTextArea ta_client;
    private javax.swing.JTextField tf_address;
    private javax.swing.JTextField tf_port;
    private javax.swing.JTextField tf_server;
    // End of variables declaration//GEN-END:variables
}